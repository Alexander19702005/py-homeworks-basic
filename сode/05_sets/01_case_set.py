# БЛОК КЕЙСА
# исходные данные взяты отсюда:
# https://netology.ru/programs/python#/experts
# https://netology.ru/programs/java-developer#/experts
# https://netology.ru/programs/fullstack-python-dev#/experts
# https://netology.ru/programs/front-end#/experts

courses = ["Python-разработчик с нуля", "Java-разработчик с нуля", "Fullstack-разработчик на Python", "Frontend-разработчик с нуля"]
mentors = [
	["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев", "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина", "Азамат Искаков", "Роман Гордиенко"],
	["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев", "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев", "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков", "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
	["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский", "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая", "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
	["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин", "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин", "Михаил Ларченко"]
]

# простой пример на цифры
a_set = {1, 2, 3}
b_set = {1, 2, 3, 5}
c_set = {5, 6}

print("Пересечение множеств (найдем общие элементы)")
print(f"a & b & c: {a_set & b_set & c_set}")
print(f"a & b: {a_set & b_set}")
print("Объединение множеств")
print(f"a | b | c: {a_set | b_set | c_set}")
print("Разность множеств")
print(f"a - b: {a_set - b_set}")
print(f"b - a: {b_set - a_set}")
print(b_set - a_set - c_set)

# содержательный пример на сопоставление преподавателей
# как быстро понять, какой курс из 4х самый крутой (больше всего преподавателей), не просматривая список и не считая вручную?
# кто у нас "суперпреподаватели", читающие лекции более чем на одном курсе?
# как собрать список всех преподавателей курса без алгоритма отсекания дублей?

# подготовим 4 множества с преподавателями
py_set = set(mentors[0])
jv_set = set(mentors[1])
fspy_set = set(mentors[2])
fr_set = set(mentors[3])

print("\n==========\nПересечение множеств - кто преподает на нескольких курсах?\n==========")
everywhere_set = py_set & jv_set & fspy_set & fr_set
print(f"Есть ли те, кто преподает на всех 4х курсах? {len(everywhere_set)>0}")
print(f"Суперпреподаватели-1: {py_set & fspy_set}")
print(f"Суперпреподаватели-2: {fspy_set & fr_set}")

print("\n==========\nОбъединение множеств: как быстро увидеть всех и без дублей\n==========")
all_list = []
[all_list.extend(x) for x in mentors]
print(all_list)
print(f"В списке {len(all_list)} преподавателей")
print(f"А на самом деле их {len(set(all_list))}")
print(f"Вот они: {set(all_list)}")
print(f"Итого у нас {len(all_list) - len(set(all_list))} дублей")

print("\n==========\nРазность множеств: найдем уникальных преподавателей (есть только на одном курсе)\n==========")
print(f"Только на {courses[0]}: {py_set - fspy_set}")
print(f"Только на {courses[2]}: {fspy_set - py_set}")
print("\n==========\nСимметрическая разность множеств: найдем уникальных преподавателей на обоих курсах\n==========")
print(f"Только на {courses[0]} либо только на {courses[2]}: {fspy_set ^ py_set}")
print(f"Только на {courses[2]} либо только на {courses[0]}: {py_set ^ fspy_set}")
print("Эти списки совпадают?")
print(fspy_set ^ py_set == py_set ^ fspy_set)

print("\n==========\nКраткая запись на примере объединения множеств\n==========")
all_set = set()
all_set |= py_set | jv_set | fspy_set | fr_set
print(f"{all_set} - их {len(all_set)} человек")
print("\n==========\nЗапись через метод update() на примере объединения множеств\n==========")
all_set = set()
all_set.update(py_set, jv_set, fspy_set, fr_set)
print(f"{all_set} - их {len(all_set)} человек")
